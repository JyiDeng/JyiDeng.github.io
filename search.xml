<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>🌍 地球 Online 游戏看板 Earth Online Kanban</title>
      <link href="/2025/03/19/%E5%9C%B0%E7%90%83%20Online%20%E6%B8%B8%E6%88%8F%E7%9C%8B%E6%9D%BF%20Earth%20Online%20Kanban/"/>
      <url>/2025/03/19/%E5%9C%B0%E7%90%83%20Online%20%E6%B8%B8%E6%88%8F%E7%9C%8B%E6%9D%BF%20Earth%20Online%20Kanban/</url>
      
        <content type="html"><![CDATA[<h1 id="地球-Online-游戏看板-Earth-Online-Kanban"><a href="#地球-Online-游戏看板-Earth-Online-Kanban" class="headerlink" title="地球 Online 游戏看板 Earth Online Kanban"></a>地球 Online 游戏看板 Earth Online Kanban</h1><p><a href="https://github.com/JyiDeng/earth-online-kanban">写了一个新的 Python 桌面游戏！欢迎来 github 使用！（点击我加Star）</a></p><p><img src="https://img.shields.io/github/stars/JyiDeng/earth-online-kanban?style=social" alt="GitHub stars"></p><!-- ![Python Version](https://img.shields.io/badge/python-3.12%2B-blue) --><p>【地球Online看板】系统已绑定，宿主您当前的属性值是…….</p><p>关键词： <strong>自我监控</strong> <strong>健康管理</strong> <strong>动机激励</strong></p><p>🌍 地球 Online 桌面游戏看板应用，可视化和跟踪人类您的日常生活中的各种属性状态，帮助你以游戏化的方式，更加量化地监控自己的生活状态。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>看板：</p><p><img src="/2024/11/13/make%E4%BD%BF%E7%94%A8clang-%E6%8A%A5cstdlib-h%E7%AD%89%E5%A4%B4%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0-ubuntu22-04/png" alt="Sunshine 效果图"></p><p>设置界面：</p><p><img src="/2024/11/13/make%E4%BD%BF%E7%94%A8clang-%E6%8A%A5cstdlib-h%E7%AD%89%E5%A4%B4%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0-ubuntu22-04/s.png" alt="Sunshine 效果图"></p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li><strong>简洁</strong>的游戏风格界面，分类显示不同属性</li><li>进度条<strong>不同颜色</strong>（红色&#x3D;危险，黄色&#x3D;警告，绿色&#x3D;健康）</li><li>多种属性状态<strong>实时更新</strong>，模拟真实生活状态的波动，自定义属性变化速率</li><li>可<strong>自定义</strong>玩家名称和初始属性值</li><li><strong>保存和加载</strong>玩家数据</li><li>非常<strong>轻量级</strong>，只需要运行单个 python 文件</li><li>本地运行，内容<strong>安全</strong></li></ul><h2 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h2><p>地球Online看板跟踪以下三大类15种属性：（未来必然会添加更多，分类也更加完善）</p><table><thead><tr><th>类别</th><th>属性</th><th>图标</th></tr></thead><tbody><tr><td><strong>生理需求</strong></td><td>饥饿</td><td>🍔</td></tr><tr><td></td><td>口渴</td><td>💧</td></tr><tr><td></td><td>上厕所</td><td>🚽</td></tr><tr><td></td><td>肥胖指数</td><td>⚖️</td></tr><tr><td></td><td>心脏健康度</td><td>❤️</td></tr><tr><td><strong>情感状态</strong></td><td>社交欲望</td><td>👥</td></tr><tr><td></td><td>情绪</td><td>😊</td></tr><tr><td></td><td>成就感</td><td>🏆</td></tr><tr><td></td><td>情商</td><td>🧠</td></tr><tr><td></td><td>爱心</td><td>💖</td></tr><tr><td><strong>能力属性</strong></td><td>肌肉强度</td><td>💪</td></tr><tr><td></td><td>敏捷</td><td>🏃</td></tr><tr><td></td><td>抗击打能力</td><td>🛡️</td></tr><tr><td></td><td>魅力</td><td>✨</td></tr><tr><td></td><td>道德</td><td>⚖️</td></tr></tbody></table><h2 id="安装运行方法"><a href="#安装运行方法" class="headerlink" title="安装运行方法"></a>安装运行方法</h2><ol><li>克隆此仓库：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JyiDeng/earth-online-kanban.git</span><br><span class="line"><span class="built_in">cd</span> earth-online-kanban</span><br></pre></td></tr></table></figure><p>应当不需要安装额外依赖。</p><ol start="2"><li>执行以下命令启动应用程序：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python earth_online_kanban.py</span><br></pre></td></tr></table></figure><p>你将看到弹窗！成功运行！</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">earth-online-kanban/</span><br><span class="line">├── earth_online_kanban.py  # 主程序文件</span><br><span class="line">├── player_data.json        # 玩家数据存储文件</span><br><span class="line">├── README.md               # 项目说明文档</span><br><span class="line">└── pic/                    # 截图文件夹</span><br></pre></td></tr></table></figure><h2 id="扩展计划"><a href="#扩展计划" class="headerlink" title="扩展计划"></a>扩展计划</h2><p>未来计划添加的功能：</p><ul><li><input disabled="" type="checkbox"> ❗事件系统 - 用户输入事件，手动或自动影响属性值</li><li><input disabled="" type="checkbox"> ❗穿戴智能 - 结合手表等健康数据，实时传入数据优化属性配置</li><li><input disabled="" type="checkbox"> ❗自动学习用户数据 - 根据用户指标变化规律，接入大模型API，拟合属性变化趋势（恶魔低语：有一天，是否会完全模拟出你的行为？）</li><li><input disabled="" type="checkbox"> ❗AI 教练 - 针对某个想控制的指标（譬如喝水口渴值），设定需要控制的范围（譬如介于40%-90%之间），程序提出个性化方案督促完成，监控指标变化效果</li><li><input disabled="" type="checkbox"> 更多自带属性 - 天气与情绪、创造力、视疲劳程度……</li><li><input disabled="" type="checkbox"> 更多自带栏目 - 将每一项分为大类、每一类目可折叠，譬如情绪分为快乐、愤怒、悲伤、无聊等，计算机技能拆成Leetcode、Python、科研能力……</li><li><input disabled="" type="checkbox"> 自定义属性 - 用户增加个性化属性大类、属性细则，并支持调整参数变化速度</li><li><input disabled="" type="checkbox"> 成就系统 - 达成特定条件获得成就，譬如属性数值本身、完成某事件的次数</li><li><input disabled="" type="checkbox"> 任务系统 - 完成任务提升属性</li><li><input disabled="" type="checkbox"> 统计和图表 - 可视化属性变化历史</li><li><input disabled="" type="checkbox"> 通知系统 - 当属性达到危险值时发出提醒</li><li><input disabled="" type="checkbox"> 多人系统 - 可选择向他人展示部分属性，增强互动性</li><li><input disabled="" type="checkbox"> 定期总结 - 数据周报、月报；趋势图</li><li><input disabled="" type="checkbox"> 多样化主题 - 支持黑夜模式和其他配色</li></ul><h2 id="贡献指南"><a href="#贡献指南" class="headerlink" title="贡献指南"></a>贡献指南</h2><p>欢迎对此项目做出贡献！可以通过以下方式参与：</p><ol start="0"><li>在 Issue 中提出创新的功能想法</li><li>Fork 仓库</li><li>创建特性分支 (<code>git checkout -b feature/AmazingFeature</code>)</li><li>提交更改 (<code>git commit -m &#39;Add some AmazingFeature&#39;</code>)</li><li>推送到分支 (<code>git push origin feature/AmazingFeature</code>)</li><li>创建一个 Pull Request</li></ol><h2 id="使用许可"><a href="#使用许可" class="headerlink" title="使用许可"></a>使用许可</h2><p>根据 MIT 许可证分发。查看 <code>LICENSE</code> 文件获取更多信息。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><ul><li>灵感来源于生活游戏化和RPG游戏系统</li><li>Python Tkinter库提供的简洁GUI实现</li><li>所有关于”地球Online”概念的有趣讨论</li></ul><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><p>项目维护者: <a href="https://github.com/JyiDeng">JyiDeng</a></p><p>项目链接: <a href="https://github.com/JyiDeng/earth-online-kanban">https://github.com/JyiDeng/earth-online-kanban</a> </p>]]></content>
      
      
      <categories>
          
          <category> Widget/Tools 插件/工具 </category>
          
          <category> Games 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🧹 QQ Summary Genius： QQ聊天文字记录AI总结助手</title>
      <link href="/2025/03/18/QQ%20Summary%20Genius%20QQ%E8%81%8A%E5%A4%A9%E6%96%87%E5%AD%97%E8%AE%B0%E5%BD%95AI%E6%80%BB%E7%BB%93%E5%8A%A9%E6%89%8B/"/>
      <url>/2025/03/18/QQ%20Summary%20Genius%20QQ%E8%81%8A%E5%A4%A9%E6%96%87%E5%AD%97%E8%AE%B0%E5%BD%95AI%E6%80%BB%E7%BB%93%E5%8A%A9%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/JyiDeng/QQ-Summary-Genius">写了一个新的 QQ 聊天记录AI总结助手！欢迎来 github 使用！（点击我加Star）</a></p><h1 id="🧹-QQ-Summary-Genius-QQ聊天文字记录AI总结助手"><a href="#🧹-QQ-Summary-Genius-QQ聊天文字记录AI总结助手" class="headerlink" title="🧹 QQ Summary Genius: QQ聊天文字记录AI总结助手"></a>🧹 QQ Summary Genius: QQ聊天文字记录AI总结助手</h1><p>QQ Summary Genius ，一个简单而强大的QQ聊天AI总结工具，帮你提炼有价值的讨论内容。</p><h2 id="🌟-主要功能"><a href="#🌟-主要功能" class="headerlink" title="🌟 主要功能"></a>🌟 主要功能</h2><ul><li>数据预处理部分<ul><li>📅 根据日期范围筛选内容</li><li>🗑️ 移除日期时间行、QQ号、昵称等信息</li><li>🖼️ 移除[图片]标记和其他表情符号</li><li>⚙️ 移除系统消息和无用重复消息，支持自定义过滤关键词<!-- - 📊 提供详细的处理统计信息 --></li></ul></li><li>AI 总结部分<ul><li>🤖 支持调用多种 AI API（SiliconFlow、OpenAI、Anthropic）进行内容总结</li><li>📊 生成Markdown格式的总结报告<!-- - ⚡ 使用多线程并行调用多个API提高效率 --></li><li>🔑 便捷的 API 密钥、模型、提示词配置系统，支持交互式设置</li><li>🔒 结果留于本地，安全性高</li></ul></li></ul><span id="more"></span><h2 id="📁-目录结构"><a href="#📁-目录结构" class="headerlink" title="📁 目录结构"></a>📁 目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── process_chat_logs.py  # 聊天记录清理主程序</span><br><span class="line">├── generate_conclusion.py # AI总结功能主程序</span><br><span class="line">├── api_config.py         # API配置管理工具</span><br><span class="line">├── setup.py              # 环境配置与初始化脚本</span><br><span class="line">├── api_keys.ini          # API密钥配置文件(通过 setup.py 自动生成)</span><br><span class="line">├── filter_keywords.txt   # 过滤规则配置文件</span><br><span class="line">├── inputs/               # 输入文件目录</span><br><span class="line">├── outputs/              # 清理后的输出文件目录</span><br><span class="line">└── conclusion/           # AI总结生成的文件目录</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>示例文件位于 <code>inputs/</code>、<code>outputs/</code>、<code>conclusion/</code>中。</p><h2 id="🚀-快速开始"><a href="#🚀-快速开始" class="headerlink" title="🚀 快速开始"></a>🚀 快速开始</h2><ol><li><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JyiDeng/QQ-Summary-Genius.git</span><br></pre></td></tr></table></figure></li><li><p>运行初始化脚本（推荐）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python setup.py</span><br></pre></td></tr></table></figure><p>这将自动创建所需目录、安装依赖，并引导你配置 API 密钥、系统提示词。</p></li></ol><p>或者，你也可以手动完成这些步骤：</p><ol start="3"><li><p>准备聊天记录：</p><ul><li>将QQ聊天记录文件放入 <code>inputs</code> 目录<ul><li>聊天记录导出：可以使用怀旧版QQ（官网下载，不带NT架构字样，可参考<a href="https://dldir1.qq.com/qqfile/qq/PCQQ9.7.23/QQ9.7.23.29400.exe">(https://dldir1.qq.com/qqfile/qq/PCQQ9.7.23/QQ9.7.23.29400.exe)</a> ），右键单击群聊，点击<code>查看消息记录</code>，进入<code>消息管理器</code>，右键单击某个群聊，点击<code>导出消息记录</code>; </li><li>选择<code>txt</code>文件格式，导出文件到<code>./inputs</code>文件夹<!-- - 确保文件使用 UTF-8 编码 --></li></ul></li></ul></li><li><p>运行聊天记录清理程序：（具体参数配置见后文）</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python process_chat_logs.py</span><br></pre></td></tr></table></figure><ol start="5"><li>配置 AI API 密钥：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python api_config.py</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python generate_conclusion.py -c</span><br></pre></td></tr></table></figure><p>或者，打开<code>J:\Project_Playground\qq_chat_ai_conclusion\api_keys.ini</code>，设置 API。</p><ol start="6"><li>选择模型：</li></ol><p>打开<code>J:\Project_Playground\qq_chat_ai_conclusion\api_keys.ini</code>，设置对应 API 的模型。</p><ol start="7"><li>运行AI总结程序：（具体参数配置见后文）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python generate_conclusion.py</span><br></pre></td></tr></table></figure></li></ol><p>预处理后的文件将保存在 <code>outputs</code> 目录，文件名格式为：<code>cleaned_原文件名_日期范围.txt</code><br>总结文件将保存在 <code>conclusion</code> 目录，文件名格式为：<code>conclusion_原文件名_日期范围.md</code></p><h2 id="📖-详细使用说明"><a href="#📖-详细使用说明" class="headerlink" title="📖 详细使用说明"></a>📖 详细使用说明</h2><h3 id="Step-1-聊天记录清理-命令行参数"><a href="#Step-1-聊天记录清理-命令行参数" class="headerlink" title="Step 1. 聊天记录清理 - 命令行参数"></a>Step 1. 聊天记录清理 - 命令行参数</h3><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>-f, --file</code></td><td>指定要处理的文件</td><td><code>-f &quot;chat.txt&quot;</code></td></tr><tr><td><code>-o, --output</code></td><td>指定输出文件路径</td><td><code>-o &quot;output/result.txt&quot;</code></td></tr><tr><td><code>-d, --directory</code></td><td>处理指定目录下的所有文件</td><td><code>-d &quot;inputs&quot;</code></td></tr><tr><td><code>-v, --verbose</code></td><td>显示详细处理信息</td><td><code>-v</code></td></tr><tr><td><code>-k, --keywords</code></td><td>指定过滤关键词配置文件</td><td><code>-k &quot;filter_keywords.txt&quot;</code></td></tr><tr><td><code>-t, --date</code></td><td>指定日期范围</td><td><code>-t &quot;2025-03-18&quot;</code></td></tr></tbody></table><h4 id="基本用例"><a href="#基本用例" class="headerlink" title="基本用例"></a>基本用例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理 inputs 目录下的所有文件，参数均采取默认值</span></span><br><span class="line">python process_chat_logs.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理单个文件</span></span><br><span class="line">python process_chat_logs.py -f <span class="string">&quot;inputs/example.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示详细处理信息</span></span><br><span class="line">python process_chat_logs.py -v</span><br></pre></td></tr></table></figure><h4 id="日期筛选示例"><a href="#日期筛选示例" class="headerlink" title="日期筛选示例"></a>日期筛选示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选指定日期的内容</span></span><br><span class="line">python process_chat_logs.py -t <span class="string">&quot;2025-03-18&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选日期范围的内容</span></span><br><span class="line">python process_chat_logs.py -t <span class="string">&quot;2025-03-16=2025-03-18&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合使用参数</span></span><br><span class="line">python process_chat_logs.py -f <span class="string">&quot;example.txt&quot;</span> -t <span class="string">&quot;2025-03-18&quot;</span> -v</span><br></pre></td></tr></table></figure><h3 id="Step-2-AI-总结-命令行参数"><a href="#Step-2-AI-总结-命令行参数" class="headerlink" title="Step 2. AI 总结 - 命令行参数"></a>Step 2. AI 总结 - 命令行参数</h3><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>-f, --file</code></td><td>指定要总结的文件</td><td><code>-f &quot;outputs/cleaned_example.txt&quot;</code></td></tr><tr><td><code>-d, --input-dir</code></td><td>指定要处理的文件目录，默认为outputs</td><td><code>-d &quot;outputs&quot;</code></td></tr><tr><td><code>-o, --output-dir</code></td><td>指定总结文件输出目录，默认为conclusion</td><td><code>-o &quot;conclusion&quot;</code></td></tr><tr><td><code>-a, --api</code></td><td>指定要使用的API源，可多选，默认为siliconflow</td><td><code>-a siliconflow openai anthropic</code></td></tr><tr><td><code>-p, --prompt</code></td><td>自定义提示词</td><td><code>-p &quot;请总结以下内容的主要话题：&quot;</code></td></tr><tr><td><code>-c, --config</code></td><td>配置API密钥</td><td><code>-c</code></td></tr><tr><td><code>-m, --model</code></td><td>指定要使用的SiliconFlow模型名称</td><td><code>-m &quot;qwen/Qwen2.5-7B-Chat&quot;</code></td></tr><tr><td><code>-s, --system-prompt</code></td><td>设置系统提示词</td><td><code>-s &quot;你是一个专业的会议纪要整理专家&quot;</code></td></tr></tbody></table><h4 id="系统提示词配置"><a href="#系统提示词配置" class="headerlink" title="系统提示词配置"></a>系统提示词配置</h4><p>程序使用的默认系统提示词为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你是一个专业的聊天内容分析助手。你的任务是对QQ聊天记录进行简明扼要的总结，提取主要话题和关键信息。格式上，按照时间顺序划分小标题，总结各个话题主要内容。</span><br></pre></td></tr></table></figure><p>你可以通过以下两种方式自定义系统提示词：</p><ol><li><p><strong>使用setup.py配置（推荐）</strong>：<br>运行 <code>python setup.py</code> 并按照提示修改系统提示词。</p></li><li><p><strong>直接编辑文件</strong>：<br>修改 <code>generate_conclusion.py</code> 文件中的 <code>SYSTEM_PROMPT</code> 常量。</p></li></ol><h4 id="基本用例-1"><a href="#基本用例-1" class="headerlink" title="基本用例"></a>基本用例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用默认API源(SiliconFlow)处理outputs目录下的所有文件</span></span><br><span class="line">python generate_conclusion.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理单个文件</span></span><br><span class="line">python generate_conclusion.py -f <span class="string">&quot;outputs/cleaned_example.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多个API源进行总结</span></span><br><span class="line">python generate_conclusion.py -a siliconflow openai anthropic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义提示词</span></span><br><span class="line">python generate_conclusion.py -p <span class="string">&quot;请分析并总结以下聊天内容的核心观点：&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定使用的模型</span></span><br><span class="line">python generate_conclusion.py -m <span class="string">&quot;qwen/Qwen2.5-72B-Chat&quot;</span></span><br></pre></td></tr></table></figure><h4 id="API-配置说明"><a href="#API-配置说明" class="headerlink" title="API 配置说明"></a>API 配置说明</h4><p>程序提供了两种方式配置API密钥：</p><ol><li><p><strong>交互式配置（推荐）</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python generate_conclusion.py -c</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python api_config.py</span><br></pre></td></tr></table></figure><p>这将启动交互式配置向导，引导你输入各个API的密钥。</p></li><li><p><strong>手动编辑配置文件</strong>：<br>配置文件保存在 <code>api_keys.ini</code>，你可以直接编辑此文件设置密钥：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[siliconflow]</span></span><br><span class="line"><span class="attr">api_key</span> = your_api_key_here</span><br><span class="line"><span class="attr">api_url</span> = https://api.siliconflow.cn/v1/chat/completions</span><br><span class="line"><span class="attr">model</span> = deepseek-ai/DeepSeek-R1-Distill-Qwen-<span class="number">7</span>B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[openai]</span></span><br><span class="line"><span class="attr">api_key</span> = your_api_key_here</span><br><span class="line"><span class="attr">api_url</span> = https://api.openai.com/v1/chat/completions</span><br><span class="line"><span class="attr">model</span> = gpt-<span class="number">3.5</span>-turbo</span><br><span class="line"></span><br><span class="line"><span class="section">[anthropic]</span></span><br><span class="line"><span class="attr">api_key</span> = your_api_key_here</span><br><span class="line"><span class="attr">api_url</span> = https://api.anthropic.com/v1/messages</span><br><span class="line"><span class="attr">model</span> = claude-<span class="number">3</span>-sonnet-<span class="number">20240229</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="模型选择-以-SiliconFlow-为例"><a href="#模型选择-以-SiliconFlow-为例" class="headerlink" title="模型选择 - 以 SiliconFlow 为例"></a>模型选择 - 以 SiliconFlow 为例</h4><p>以 SiliconFlow 平台为例，它提供了多种可用模型，我们在此需要选择：</p><ul><li><strong>DeepSeek</strong>：<code>Pro/deepseek-ai/DeepSeek-R1</code>、<code>deepseek-ai/DeepSeek-R1-Distill-Qwen-7B</code>（默认使用的模型）等</li><li><strong>Qwen</strong>：<code>Qwen/Qwen2.5-72B-Instruct-128K</code>、<code>Qwen/Qwen2.5-Coder-7B-Instruct</code>等</li><li><strong>internlm</strong>：<code>internlm/internlm2_5-7b-chat</code>、<code>internlm/internlm2_5-20b-chat</code>等</li><li><strong>BAAI</strong>：<code>BAAI/bge-large-zh-v1.5</code>等</li><li><strong>THUDM</strong>：<code>THUDM/glm-4-9b-chat</code>等</li><li>…(其他模型)</li></ul><p>你可以通过以下方式指定模型：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A. 使用命令行参数指定</span></span><br><span class="line">python generate_conclusion.py -m <span class="string">&quot;Qwen/Qwen2.5-Coder-7B-Instruct&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B. 在api_keys.ini文件中修改model字段</span></span><br></pre></td></tr></table></figure><p>或在<code>api_keys.ini</code>文件中修改model字段。</p><p>如果报错为模型不存在，可能是以上模型过期，请查阅SiliconFlow官方文档获取最新的模型列表。</p><h3 id="⚙️-自定义过滤规则"><a href="#⚙️-自定义过滤规则" class="headerlink" title="⚙️ 自定义过滤规则"></a>⚙️ 自定义过滤规则</h3><p>在 <code>filter_keywords.txt</code> 中添加过滤规则，每行一个：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 普通文本</span><br><span class="line">Q群管家</span><br><span class="line">[图片]</span><br><span class="line"></span><br><span class="line"># 正则表达式（以 \ 开头）</span><br><span class="line">\[表情\]</span><br><span class="line">\[流泪\].*</span><br></pre></td></tr></table></figure><p>等等。</p><h2 id="🤝-贡献"><a href="#🤝-贡献" class="headerlink" title="🤝 贡献"></a>🤝 贡献</h2><p>欢迎提交 Issue 和 Pull Request 来帮助改进这个工具！</p><h2 id="📄-许可证"><a href="#📄-许可证" class="headerlink" title="📄 许可证"></a>📄 许可证</h2><p>MIT License - 详见 <a href="https://github.com/JyiDeng/QQ-Summary-Genius/blob/master/LICENSE">LICENSE</a> 文件</p>]]></content>
      
      
      <categories>
          
          <category> Widget/Tools 插件/工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sunshine🌞小太阳 - Your Desktop Pinned Motto &amp; Pic Widget (Windows)</title>
      <link href="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&amp;%20Pic%20(Windows)/"/>
      <url>/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&amp;%20Pic%20(Windows)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/JyiDeng/Sunshine-Your-Desktop-Pinned-Motto-and-Pic-Widget-on-Windows">写了一个新的 Windows 桌面插件！欢迎来 github 使用！（点击我加Star）</a></p><p>🌞<strong>Sunshine 小太阳</strong> 的灵感来源于作者阴雨天时心情不佳，希望用阳光为用户带来温暖。基于 Windows ， Sunshine 可以展示自定义的格言、图片，可以切换喜欢的主题，运行也非常简单。</p><p>Sunshine was inspired by the author’s bad mood on rainy days, hoping to bring warmth to users. Based on Windows, Sunshine can display customized mottos and pics, switch favorite themes, and is easy to run.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li>📌<strong>Inspirational Display</strong>: 置顶展示多句提醒自己的格言，并配上一张图片。Presents multiple self - reminding mottos accompanied by an image, all <strong>pinned</strong> on the top of all windows.</li><li>🎨<strong>Customizable Settings</strong>: 可以切换主题、调整窗口大小、设置格言刷新频率等。Allows you to switch themes, adjust the window size, and set the refresh frequency of mottos. </li><li>☁️<strong>Lightweight Design</strong>: 特别轻量级。Sunshine is extremely lightweight.</li></ul><span id="more"></span><h3 id="Sunshine-双语效果图-Sunshine-Screenshot-（Both-in-Chinese-and-English）"><a href="#Sunshine-双语效果图-Sunshine-Screenshot-（Both-in-Chinese-and-English）" class="headerlink" title="Sunshine 双语效果图 Sunshine Screenshot （Both in Chinese and English）"></a>Sunshine 双语效果图 Sunshine Screenshot （Both in Chinese and English）</h3><p><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/Sunshine.png" alt="Sunshine 效果图"></p><p><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/Sunshine_en.png" alt="Sunshine 效果图-en"></p><h3 id="双语配置效果图-Config-Screenshot-（Both-in-Chinese-and-English）"><a href="#双语配置效果图-Config-Screenshot-（Both-in-Chinese-and-English）" class="headerlink" title="双语配置效果图 Config Screenshot （Both in Chinese and English）"></a>双语配置效果图 Config Screenshot （Both in Chinese and English）</h3><p><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/config.png" alt="Config 效果图"> </p><p><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/config_en.png" alt="Config 效果图-en"> </p><h2 id="安装与运行-Install-Run"><a href="#安装与运行-Install-Run" class="headerlink" title="安装与运行 Install &amp; Run"></a>安装与运行 Install &amp; Run</h2><ol><li>下载 Download：克隆仓库，或下载zip：<code>git clone git@github.com:JyiDeng/Sunshine.git</code></li><li>安装 Install：使用<code>requirements.txt</code>安装需要的库：<code>pip install -r requirements.txt</code></li><li>配置 Config：在<code>config.json</code>中，配置想要的格言。 In the <code>config.json</code> file, configure the mottos you desire. </li><li>运行 Run：<code>python Sunshine.py</code>，并在<code>设置/Settings</code>按钮中配置具体的图片、色彩、大小等。 Run the program by <code>python Sunshine.py</code>. After that, in the <code>设置/Settings</code> button, you can configure specific elements such as images, colors, and size.</li><li>拖拽 Drag：按住图片部分进行拖拽。 Drag on the image part.</li></ol><h2 id="致谢-Acknowledgement"><a href="#致谢-Acknowledgement" class="headerlink" title="致谢 Acknowledgement"></a>致谢 Acknowledgement</h2><p>让我们说谢谢糯米（你可以在<code>pic/</code>中发现它的照片作为示例）：Let us thank Nuomi (You can find its photos in <code>pic/</code>):</p><p><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/cat.jpg" alt="糯米-竖"><br><img src="/2025/03/10/Sunshine%F0%9F%8C%9E%E5%B0%8F%E5%A4%AA%E9%98%B3%20-%20Your%20Desktop%20Pinned%20Motto%20&%20Pic%20(Windows)/cat2.jpg" alt="糯米-横"></p>]]></content>
      
      
      <categories>
          
          <category> Widget/Tools 插件/工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地部署ollama+deepseek-r1排错攻略(ollama版本过低/自定义安装路径/不显示思路/500 INTERNAL_ERROR/其他常用链接传送门)</title>
      <link href="/2025/02/06/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2ollama-deepseek-r1%E6%8E%92%E9%94%99%E6%94%BB%E7%95%A5-ollama%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84-%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%80%9D%E8%B7%AF-500-INTERNAL-ERROR-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E4%BC%A0%E9%80%81%E9%97%A8/"/>
      <url>/2025/02/06/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2ollama-deepseek-r1%E6%8E%92%E9%94%99%E6%94%BB%E7%95%A5-ollama%E7%89%88%E6%9C%AC%E8%BF%87%E4%BD%8E-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84-%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%80%9D%E8%B7%AF-500-INTERNAL-ERROR-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5%E4%BC%A0%E9%80%81%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>​1. ollama版本过低，deepseek回复为空，qwen无法chat</p><ol><li>ollama改变&#x2F;自定义安装路径</li><li>Error: pull model manifest: 500: {“errors”:[{“code”:”INTERNAL_ERROR”,”message”:”internal error”}]}</li><li>在cmd使用ollama run，无法显示&lt;think&gt;的思路</li><li>其他各类deepseek信息传送门<span id="more"></span></li></ol><p>本人环境：Windows 11，不使用docker，直接安装ollama；16GB RAM，无GPU。</p><h1 id="1-ollama版本过低，deepseek回复为空，qwen无法chat"><a href="#1-ollama版本过低，deepseek回复为空，qwen无法chat" class="headerlink" title="1. ollama版本过低，deepseek回复为空，qwen无法chat"></a>1. ollama版本过低，deepseek回复为空，qwen无法chat</h1><blockquote><p>正确安装ollama、正确拉取deepseek-r1:1.5b后，能够用ollama list找到有这个模型，也有chat提示语（<code>&gt;&gt;&gt;Send a message (/? for help)</code> ) ，但是和模型chat的过程中，<strong>deepseek的回复为空</strong>；<br>为了验证问题所在，正确拉取qwen2:0.5b，但是无法开始chat，报错：<strong>Error: llama runner process no longer running: 3221226505</strong></p></blockquote><p>解决方案：用 <code>ollama --version</code> 查询版本是0.1.x，结合以上两个问题来看，ollama版本太低了。灵感来自：<a href="https://blog.csdn.net/alalaal/article/details/140828463">使用ollama运行llama3.1遇到问题+手工升级ollama</a></p><p>先卸载当前ollama，再回到官网下载更高版本的ollama（据2025年2月6日观察，0.5.x 好使）。具体如何安装，可以看以下第二点里的链接：</p><h1 id="2-ollama改变-自定义安装路径"><a href="#2-ollama改变-自定义安装路径" class="headerlink" title="2. ollama改变&#x2F;自定义安装路径"></a>2. ollama改变&#x2F;自定义安装路径</h1><blockquote><p>ollama的setup.exe运行的时候，是不能手动选择安装位置、model存放位置的。</p></blockquote><p>如果你已经安装完ollama，并且想改路径，方法一（不推荐）：安装完以后，<code>把整个ollama可执行文件所在的文件夹、整个models文件夹移动到想要的位置</code>，<code>并且修改相应的2个环境变量</code>。不推荐，是因为可能导致上面第一点的问题。具体操作方法，参考文章：<br><a href="https://blog.csdn.net/youeyeb/article/details/144905333">在Windows中将Ollama安装到其他盘（例如D盘）的步骤如下_ollama安装到d盘-CSDN博客</a></p><p>如果你还没安装ollama，方法二更好：直接在安装时修改路径，<code>OllamaSetup.exe /DIR=你想要安装的位置</code>，<code>并且修改相应的2个环境变量</code>。具体操作方法，参考文章：<a href="https://www.cnblogs.com/LaiYun/p/18696931">自定义Ollama安装路径 - 不愿透露姓名的菜鸟 - 博客园</a> ；或者 <a href="https://blog.csdn.net/qq_36975640/article/details/145443487">OLLAMA win11安装完整指南（安装时指定路径）</a></p><p>备注：models默认目录为 <code>C:\Users%username%.ollama\models</code>，这个<code>.ollama</code>文件夹里的<code>server.log</code>可以用来排除错误，其中的内容和 <code>ollama serve</code>的一致，想要运行后者的命令，需要当前没有ollama正在运行，具体操作可以参考：<a href="https://blog.csdn.net/weixin_40280870/article/details/145275600">Windows安装与配置Ollama-CSDN博客</a></p><h1 id="3-Error-pull-model-manifest-500-“errors”-“code”-”INTERNAL-ERROR”-”message”-”internal-error”"><a href="#3-Error-pull-model-manifest-500-“errors”-“code”-”INTERNAL-ERROR”-”message”-”internal-error”" class="headerlink" title="3. Error: pull model manifest: 500: {“errors”:[{“code”:”INTERNAL_ERROR”,”message”:”internal error”}]}"></a>3. Error: pull model manifest: 500: {“errors”:[{“code”:”INTERNAL_ERROR”,”message”:”internal error”}]}</h1><blockquote><p>根据 <a href="https://github.com/ollama/ollama/issues/8873">GitHub: pull model manifest: 500 #8873</a> ：北京时间2025年2月6日16:20左右开始，拉取不了新模型</p></blockquote><p>解决方案：等待ollama修复。<br>结果：17:30左右，可以正常pull了。</p><p>（觉得速度很慢？本人使用魔法后，对于提速依然无效，只能硬等。。。）</p><h1 id="4-在cmd使用ollama-run，无法显示的思路"><a href="#4-在cmd使用ollama-run，无法显示的思路" class="headerlink" title="4. 在cmd使用ollama run，无法显示&lt;think&gt;的思路"></a>4. 在cmd使用ollama run，无法显示&lt;think&gt;的思路</h1><blockquote><p>&lt;think&gt;&lt;&#x2F;think&gt;中，内容为空；<br>问题回答太过简单，甚至有些不带脑子。</p></blockquote><p>可能原因：</p><ul><li>在cmd的默认路径（C:\Users\你的用户名）进行<code>ollama run 你的模型名字</code>，确实会导致它的回答不带脑子（我也很好奇为什么）。<ul><li>解决方案1：换一个路径，譬如在cmd 输入 <code>cd Downloads</code> 即可。</li><li>解决方案2：写程序调用。（js程序见下）</li><li>解决方案3：使用Chatbox等工具调用。参考：<a href="https://cloud.tencent.com/developer/article/2492444">高效快速教你deepseek如何进行本地部署并且可视化对话</a></li></ul></li><li>问题过于简单，譬如聊天中的第一句“你好”，确实没有思考过程。</li><li>可能是版本过低，跳转第一点问题与解决。</li></ul><p>可参考的最简易版 javascript 程序：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://localhost:11434/api/generate&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&quot;deepseek-r1:1.5b&quot;</span>,</span><br><span class="line">    <span class="attr">prompt</span>: <span class="string">&quot;如果一只橘子坚称它是一只猫，人工智能该怎么办？&quot;</span>,</span><br><span class="line">    <span class="attr">stream</span>: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><h1 id="5-其他各类deepseek信息传送门"><a href="#5-其他各类deepseek信息传送门" class="headerlink" title="5. 其他各类deepseek信息传送门"></a>5. 其他各类deepseek信息传送门</h1><p>ollama官网下载链接（访问网页不需要魔法，但下载需要）： <a href="https://ollama.com/download">Download Ollama</a> ，或者GitHub下载链接：<a href="https://github.com/ollama/ollama/releases">Releases · ollama&#x2F;ollama</a></p><p>各个deepseek模型对应的电脑性能：<a href="https://zhuanlan.zhihu.com/p/21674080803">DeepSeek模型各版本硬件要求指南</a> ，以及（这篇不确定是不是AI撰写的）：<a href="https://codingmall.com/knowledge-base/25-global/248276-deepseek">DeepSeek编码器可以在预算友好的设置上运行，还是需要高端硬件</a></p><p>​ollama 相关命令：<a href="https://www.runoob.com/ollama/ollama-commands.html">菜鸟教程-Ollama 相关命令</a></p><p>Chatbox官网下载链接（访问网页不需要魔法，但下载需要）：<a href="https://chatboxai.app/zh">Chatbox AI</a>，或者GitHub下载链接：<a href="https://github.com/Bin-Huang/chatbox/releases">Releases · Bin-Huang&#x2F;chatbox</a></p>]]></content>
      
      
      <categories>
          
          <category> Deepseek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ollama </tag>
            
            <tag> Deepseek </tag>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make使用clang++报cstdlib.h等头文件找不到(ubuntu22.04)</title>
      <link href="/2024/11/13/make%E4%BD%BF%E7%94%A8clang-%E6%8A%A5cstdlib-h%E7%AD%89%E5%A4%B4%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0-ubuntu22-04/"/>
      <url>/2024/11/13/make%E4%BD%BF%E7%94%A8clang-%E6%8A%A5cstdlib-h%E7%AD%89%E5%A4%B4%E6%96%87%E4%BB%B6%E6%89%BE%E4%B8%8D%E5%88%B0-ubuntu22-04/</url>
      
        <content type="html"><![CDATA[<p>本人环境：Ubuntu22.04。出于项目要求，必须用clang++，不能用g++。</p><blockquote><p>更新clang++版本无用，更新llvm版本无用，在makefile添加 -I 来增加include路径也没用。</p></blockquote><p>最后gpt给的解决方法解决了问题：</p><p><code>sudo apt install g++-12 libstdc++-12-dev</code></p><p>而且，本人通过g++ –version发现我的版本是11（具体来说：gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04) ），但是偏偏就是安装上方的12才能解决问题，把12换成11不行。</p><p>此外，在做上方安装之前，我做过一个路径添加（不过应该是临时的吧），或许可以一试，但不能直接解决问题：</p><p><code>export CPLUS_INCLUDE_PATH=/usr/include/c++/11</code></p>]]></content>
      
      
      <categories>
          
          <category> 编译 Compile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> clang++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TodoList：记初次Vuex探索（本地+Codepen）（使用component）(版本：vue2, vuex3)</title>
      <link href="/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/"/>
      <url>/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/</url>
      
        <content type="html"><![CDATA[<p>​<br>一、写在前面+效果图<br>二、Vuex<br>2.1 Codepen：html+js+css<br>2.1.1 一个可能更加通顺的思路<br>2.2 本地：App.vue，components&#x2F;component1.vue，store&#x2F;index.js</p><span id="more"></span><h1 id="写在前面-效果图"><a href="#写在前面-效果图" class="headerlink" title="写在前面+效果图"></a>写在前面+效果图</h1><p>本次是探索性质，肯定有一定差错和不足，我会继续学习。</p><p>不做详细的vue和vuex语法、功能介绍，因为官方文档讲得比我清楚，我主要是提供撰写的顺序思路，以及完整的代码。</p><p>目录在上面，自取所需。</p><p>效果图：</p><p><img src="/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/2763475751604c36a518185969ea478c.png" alt="alt text"></p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Codepen：html-js-css"><a href="#Codepen：html-js-css" class="headerlink" title="Codepen：html+js+css"></a>Codepen：html+js+css</h2><p>如何在这个界面使用vuex？只需要在html里写上：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>codepen这里的意思就是不分文件层级，所有js都在一个js里，html、css也是，确实很简洁。</p><h3 id="一个可能更加通顺的思路"><a href="#一个可能更加通顺的思路" class="headerlink" title="一个可能更加通顺的思路"></a>一个可能更加通顺的思路</h3><p>对于js部分，首先把框架写出来，三个部分：new Vue、vue的组件、Vuex部分：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;c1&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    `</span>, </span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="title function_">computed</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">    &#125;,    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;c2&#x27;</span>,&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">New</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    store,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;   </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;loadTodos&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后，根据界面里有什么，构想各个component应该长什么样，譬如我认为，我需要一个header，还需要一个content。</p><p>html：对的，用组件就这么简单明了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header-component</span>&gt;</span><span class="tag">&lt;/<span class="name">header-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content-component</span>&gt;</span><span class="tag">&lt;/<span class="name">content-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据html设计思路，在Vue.component里填写template内容：譬如<code>div、button</code>，以及一些要用的变量，一开始只写个框，譬如<code>&lt;button&gt;增加&lt;/button&gt;，&#123;&#123;total&#125;&#125;</code>，先不考虑这个变量存不存在，以便于排除冗杂的信息；</p><p>接着，根据文字说明，具体地填写功能，譬如我要实现增加，我就要点这个按钮调用函数，所以我扩充为<code>&lt;button @click=&quot;addTodo&quot;&gt;增加&lt;/button&gt;</code>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;header-component&quot;, &#123;</span><br><span class="line">template: `</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFilter(&#x27;all&#x27;)&quot;</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFilter(&#x27;finished&#x27;)&quot;</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFilter(&#x27;not-finished&#x27;)&quot;</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>总共&#123;&#123; total &#125;&#125;条，已完成&#123;&#123; completed &#125;&#125;条，剩余&#123;&#123; remaining &#125;&#125;条<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clearCompleted&quot;</span>&gt;</span>清除已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;checkAll&quot;</span>&gt;</span>全部完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;headerAdd&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span>增加新的TODO<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    `,</span><br><span class="line">// 以下省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然写了一些想实现的方法，譬如addTodo，那么接下来就在各个component的methods里写上要让vuex调用数据驱动的方法的大概样子（有点像先写个抽象类，之后再完善），格式都是this.$store.commit(‘vuex里的方法名’,要传的变量);</p><p>变量也是如此，在computed里写。vuex里已有的变量用this.$store.state，要计算的变量用this.$store.getters（这个目前还不知道要不要计算，所以先写一个试试）</p><p><img src="/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/vuex1.png" alt="alt text"></p><p>那么现在vue的部分完成了，要写vuex了。根据之前的这些commit、state、getters的内容，填充Vuex，先写mutation，再写getters，过程中会发现需要变量，就往state里加。大概长图片那样</p><ul><li>mutations和getters：每个函数的第一个变量都是state，修改state{}里的数据必须用这个前缀；第二个开始的参数是传入的，根据之前写的来</li><li>具体功能就在这里实现，这就是数据驱动的精妙之处，具体的操作都让vuex执行，不用vue的component之前传来传去的麻烦</li><li>getters需要return，之前的computed也要写return，别忘了就是。</li></ul><p><img src="/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/vuex2.png" alt="alt text"></p><p>最后，进行功能检查：getters和computed用对了吗，dispatch和commit用对了吗，其他各种检查。那么vuex的功能差不多也完成了。</p><p>codepen这种情况下的总体代码：</p><p>html里：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header-component</span>&gt;</span><span class="tag">&lt;/<span class="name">header-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content-component</span>&gt;</span><span class="tag">&lt;/<span class="name">content-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js里：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;header-component&quot;</span>, &#123;</span><br><span class="line"><span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;header&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;filter&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;myFilter(&#x27;all&#x27;)&quot;&gt;全部&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;myFilter(&#x27;finished&#x27;)&quot;&gt;已完成&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;myFilter(&#x27;not-finished&#x27;)&quot;&gt;未完成&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;span&gt;总共&#123;&#123; total &#125;&#125;条，已完成&#123;&#123; completed &#125;&#125;条，剩余&#123;&#123; remaining &#125;&#125;条&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;clearCompleted&quot;&gt;清除已完成&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;checkAll&quot;&gt;全部完成&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;button class=&quot;headerAdd&quot; @click=&quot;addTodo&quot;&gt;增加新的TODO&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">todoList</span>.<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">completed</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">completed</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">remaining</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">remaining</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">myFilter</span>(<span class="params">status</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;setFilterStatus&quot;</span>, status);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">clearCompleted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;clearCompleted&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">checkAll</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;checkAll&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;addTodo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;content-component&quot;</span>, &#123;</span><br><span class="line"><span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;content&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;todo-item&quot; v-for=&quot;(item, index) in filteredTodoList&quot; :key=&quot;item.id&quot; transition=&quot;zj&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;input class=&quot;checkbox&quot; type=&quot;checkbox&quot; @click=&quot;check(index, item.id)&quot; v-model=&quot;item.isChecked&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;input class=&quot;item-input&quot; v-model=&quot;item.text&quot; type=&quot;text&quot; :disabled=&quot;item.isChecked&quot; @blur=&quot;handleBlur()&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;input type=&quot;datetime-local&quot; v-model=&quot;item.time&quot; @blur=&quot;handleBlur&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;removeTodo(index, item.id)&quot;&gt;删除&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">filteredTodoList</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">filteredTodoList</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="title function_">check</span>(<span class="params">index, id</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;check&quot;</span>, &#123; index, id &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">removeTodo</span>(<span class="params">index, id</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;removeTodo&quot;</span>, &#123; index, id &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleBlur</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;saveTodos&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"><span class="attr">todoList</span>: [],</span><br><span class="line"><span class="attr">filterStatus</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"><span class="title function_">filteredTodoList</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">filterStatus</span> === <span class="string">&quot;finished&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">isChecked</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">filterStatus</span> === <span class="string">&quot;not-finished&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">total</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">completed</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">isChecked</span>).<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">remaining</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"><span class="title function_">setFilterStatus</span>(<span class="params">state, status</span>) &#123;</span><br><span class="line">state.<span class="property">filterStatus</span> = status;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">addTodo</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line"><span class="attr">id</span>: <span class="title class_">Number</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">10</span>) + <span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">toString</span>(</span><br><span class="line"><span class="number">10</span></span><br><span class="line">),</span><br><span class="line"><span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">removeTodo</span>(<span class="params">state, &#123; index, id &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">todoList</span>[index].<span class="property">id</span> === id) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">check</span>(<span class="params">state, &#123; index, id &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">todoList</span>[index].<span class="property">id</span> === id) &#123;</span><br><span class="line">state.<span class="property">todoList</span>[index].<span class="property">isChecked</span> = !state.<span class="property">todoList</span>[index].<span class="property">isChecked</span>;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">checkAll</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">item.<span class="property">isChecked</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">clearCompleted</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span> = state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">saveTodos</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">loadTodos</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> tmp = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;todoList1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">state.<span class="property">todoList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(tmp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">state.<span class="property">todoList</span> = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">id</span>: <span class="title class_">Number</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">10</span>) + <span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">toString</span>(</span><br><span class="line"><span class="number">10</span></span><br><span class="line">),</span><br><span class="line"><span class="attr">text</span>: <span class="string">&quot;请点击上方的添加按钮添加事件&quot;</span>,</span><br><span class="line"><span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">store,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;loadTodos&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>css部分请自由发挥。</p><h2 id="本地：App-vue，components-component1-vue，store-index-js，main-js"><a href="#本地：App-vue，components-component1-vue，store-index-js，main-js" class="headerlink" title="本地：App.vue，components&#x2F;component1.vue，store&#x2F;index.js，main.js"></a>本地：App.vue，components&#x2F;component1.vue，store&#x2F;index.js，main.js</h2><p>内容还是基本一样的，本地的问题主要是看东西放在哪个文件夹。</p><p>首先你得装了vue；然后在一个文件夹启动环境；而且要在同一个文件夹装vuex。</p><p>这样的话，你将会看到的结构：（TEST_VUE是根目录；store文件夹本来没有，自己建一个。）</p><p>App.vue同级还需要一个main.js:</p><p><img src="/2024/07/17/TodoList%EF%BC%9A%E8%AE%B0%E5%88%9D%E6%AC%A1Vuex%E6%8E%A2%E7%B4%A2%EF%BC%88%E6%9C%AC%E5%9C%B0-Codepen%EF%BC%89%EF%BC%88%E4%BD%BF%E7%94%A8component%EF%BC%89-%E7%89%88%E6%9C%AC%EF%BC%9Avue2-vuex3/vuex3.png" alt="alt text"></p><p>请看各个文件</p><p>App.vue几乎完全一样:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header-component</span>&gt;</span><span class="tag">&lt;/<span class="name">header-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content-component</span>&gt;</span><span class="tag">&lt;/<span class="name">content-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>store&#x2F;index.js：放的是vuex的东西，记得import和Vue.use(vuex)</p><p>注意export default new Vuex.Store代替了之前的new store &#x3D; Vuex.Store，不改的话会报错：We‘re sorry but doesn’t work properly without JavaScript enabled. Please enable it to continue</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line"><span class="attr">todoList</span>: [],</span><br><span class="line"><span class="attr">filterStatus</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"><span class="title function_">filteredTodoList</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">filterStatus</span> === <span class="string">&quot;finished&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">isChecked</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">filterStatus</span> === <span class="string">&quot;not-finished&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">total</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">completed</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">isChecked</span>).<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">remaining</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line"><span class="title function_">setFilterStatus</span>(<span class="params">state, status</span>) &#123;</span><br><span class="line">state.<span class="property">filterStatus</span> = status;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">addTodo</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">unshift</span>(&#123;</span><br><span class="line"><span class="attr">id</span>: <span class="title class_">Number</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">10</span>) + <span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">toString</span>(</span><br><span class="line"><span class="number">10</span></span><br><span class="line">),</span><br><span class="line"><span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">removeTodo</span>(<span class="params">state, &#123; index, id &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">todoList</span>[index].<span class="property">id</span> === id) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">check</span>(<span class="params">state, &#123; index, id &#125;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (state.<span class="property">todoList</span>[index].<span class="property">id</span> === id) &#123;</span><br><span class="line">state.<span class="property">todoList</span>[index].<span class="property">isChecked</span> = !state.<span class="property">todoList</span>[index].<span class="property">isChecked</span>;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">checkAll</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">item.<span class="property">isChecked</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">clearCompleted</span>(<span class="params">state</span>) &#123;</span><br><span class="line">state.<span class="property">todoList</span> = state.<span class="property">todoList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !item.<span class="property">isChecked</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">saveTodos</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todoList1&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">todoList</span>));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">loadTodos</span>(<span class="params">state</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> tmp = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;todoList1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">state.<span class="property">todoList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(tmp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">state.<span class="property">todoList</span> = [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">id</span>: <span class="title class_">Number</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">10</span>) + <span class="title class_">Date</span>.<span class="title function_">now</span>()).<span class="title function_">toString</span>(</span><br><span class="line"><span class="number">10</span></span><br><span class="line">),</span><br><span class="line"><span class="attr">text</span>: <span class="string">&quot;请点击上方的添加按钮添加事件&quot;</span>,</span><br><span class="line"><span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>().<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>main.js：注意下面的东西路径正确，注意header-component是最终使用在html的名字，不能写错；注意这里用了mount，和之前不一样了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HeaderComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/header.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ContentComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/content.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;header-component&#x27;</span>, <span class="title class_">HeaderComponent</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;content-component&#x27;</span>, <span class="title class_">ContentComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(app)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>components&#x2F;content.vue：注意export default的变化。header那个也类似地调整一下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in filteredTodoList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">transition</span>=<span class="string">&quot;zj&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;todo-item__checkbox&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;check(index, item.id)&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.isChecked&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;todo-item__item-input&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;item.isChecked&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;handleBlur()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;todo-item__datetime-local&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.time&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;handleBlur&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(index, item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">filteredTodoList</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">filteredTodoList</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">check</span>(<span class="params">index, id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;check&quot;</span>, &#123; index, id &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">removeTodo</span>(<span class="params">index, id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;removeTodo&quot;</span>, &#123; index, id &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleBlur</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;saveTodos&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>差不多就完成了。</p><p>其他的具体配置我也不懂了，主要还是跟着其他人的教程进行安装，有问题就找攻略修。希望大家都写得顺利！</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 前端 FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识hikari框架+Mockito软件测试笔记</title>
      <link href="/2024/04/17/%E5%88%9D%E8%AF%86hikari%E6%A1%86%E6%9E%B6-Mockito%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/17/%E5%88%9D%E8%AF%86hikari%E6%A1%86%E6%9E%B6-Mockito%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>一、hikari框架的各层次内容解释（导图）<br>二、会用到的测试：Mockito 的 MockMvc<br>2.1. 正向思考简单的Mockito的测试怎么写<br>2.2. 一个完整测试段落的例子<br>2.3. <code>when...thenReturn</code>或者<code>given...willReturn</code>或者<code>doNothing</code>函数<br>2.4. <code>perform</code>和<code>andExpect</code>函数：用来模拟http连接的<br>2.5. <code>verify</code>函数：验证方法是否被调用过、调用过几次<br>2.6. json相关操作:<code>$[i]</code>的意思是第i个参数、<code>$</code>是数组<br>2.7. <code>perform....andExpect</code>里的<code>is3xxRedirection()</code></p><span id="more"></span><p>首次发表在：<a href="https://blog.csdn.net/weixin_50132289/article/details/137880658">https://blog.csdn.net/weixin_50132289/article/details/137880658</a><br>​</p><h1 id="一、hikari框架的各层次内容解释（导图）"><a href="#一、hikari框架的各层次内容解释（导图）" class="headerlink" title="一、hikari框架的各层次内容解释（导图）"></a>一、hikari框架的各层次内容解释（导图）</h1><p>以前第一次见到类似的框架还是ruoyi框架。彼时的我还完全不明白这种文件结构，看到就怕。现在做了个思维导图小梳理，图中以我本次课程作业中的entity-Message为例，衍生出相关的controller、dao、service。</p><p> <img src="/2024/04/17/%E5%88%9D%E8%AF%86hikari%E6%A1%86%E6%9E%B6-Mockito%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0/3ab055a889c8eb78d12d3ea800d6f3a0.png" alt="hikari框架层次梳理"></p><h1 id="二、会用到的测试：Mockito-的-MockMvc"><a href="#二、会用到的测试：Mockito-的-MockMvc" class="headerlink" title="二、会用到的测试：Mockito 的 MockMvc"></a>二、会用到的测试：Mockito 的 MockMvc</h1><p>对于其中的各个常用方法进行了梳理。<br>仅作示例作用，并没有深入解释其原理。<br>对我帮助很大的Mockito应用指南：<a href="https://hezhiqiang8909.gitbook.io/java/docs/javalib/mockito">https://hezhiqiang8909.gitbook.io/java/docs/javalib/mockito</a></p><h2 id="1-正向思考简单的Mockito的测试怎么写"><a href="#1-正向思考简单的Mockito的测试怎么写" class="headerlink" title="1. 正向思考简单的Mockito的测试怎么写"></a>1. 正向思考简单的Mockito的测试怎么写</h2><p>此处作为总结，本文后面有一些我遇到的例子。再次说明，仅作示例作用，并未深入解释原理。</p><ol><li>@ExtendWith、@WebMvcTest、@MockBean配置好</li><li>@BeforeEach进行setup，初始化全局变量</li><li>@Test每一个controller类里的方法，初始化局部变量，譬如一些列表、一些到Page的映射</li><li>对模拟出来的变量<strong>配置返回值</strong>：<strong>given…willReturn 或 when…thenReturn</strong>（或 doNothing）。<br> · 具体语法：when(xxxService的函数(函数调用的参数…)).thenReturn(模拟出来的东西的返回值)</li><li>使用Mockito的 <strong>perform…andExpect</strong> 进行HTTP连接，测试连接是否200、相应属性是否正确、返回值如何；如有需要，测试能否redirect到下一个指定的网页。<br> · 具体语法：mockMvc.perform(get(网址).sessionAttrs或params).andExpect(status().isOk()).andExpect(view().name(xxx)).andExpect(model().attribute(expected,actual))</li><li>使用Mockito的 <strong>verify</strong> 方法，对于属性和状态进行测试对于前述配置过的函数<strong>被调用的次数</strong>进行测试。<br> · 具体语法：verify(xxxService).xxxService刚才调用的函数(函数的参数)</li><li>如果需要，如果被测试类里有 成功vs失败、不重复vs重复、登录与否、更改密码&#x2F;图片 等等的<strong>分类讨论，那么可以考虑写成多个测试类</strong></li></ol><h2 id="2-一个完整测试段落的例子"><a href="#2-一个完整测试段落的例子" class="headerlink" title="2. 一个完整测试段落的例子"></a>2. 一个完整测试段落的例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">modifyMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">// 局部变量初始化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">messageID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;Updated message content&quot;</span>;</span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">message.setContent(content);</span><br><span class="line">message.setTime(LocalDateTime.now());</span><br><span class="line">message.setState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// when...thenReturn</span></span><br><span class="line"><span class="keyword">when</span>(messageService.findById(messageID)).thenReturn(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">// perform...post</span></span><br><span class="line">mockMvc.perform(post(<span class="string">&quot;/modifyMessage.do&quot;</span>)</span><br><span class="line">.param(<span class="string">&quot;messageID&quot;</span>, String.valueOf(messageID))</span><br><span class="line">.param(<span class="string">&quot;content&quot;</span>, content))</span><br><span class="line">.andExpect(status().isOk())</span><br><span class="line">.andExpect(content().string(<span class="string">&quot;true&quot;</span>)); <span class="comment">// return value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// verify</span></span><br><span class="line">verify(messageService, times(<span class="number">1</span>)).findById(messageID);</span><br><span class="line">verify(messageService, times(<span class="number">1</span>)).update(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是Junit的测试方法，assertEquals(预期值，实际值)判断两者是否相等</span></span><br><span class="line"><span class="comment">// 体现Junit可以和Mockito结合使用</span></span><br><span class="line">assertEquals(content, message.getContent());</span><br><span class="line">assertEquals(<span class="number">1</span>, message.getState());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-when-thenReturn或者given-willReturn或者doNothing函数：都用于配置、指定模拟对象的行为，模拟对象应该返回的东西。"><a href="#3-when-thenReturn或者given-willReturn或者doNothing函数：都用于配置、指定模拟对象的行为，模拟对象应该返回的东西。" class="headerlink" title="3. when...thenReturn或者given...willReturn或者doNothing函数：都用于配置、指定模拟对象的行为，模拟对象应该返回的东西。"></a>3. <code>when...thenReturn</code>或者<code>given...willReturn</code>或者<code>doNothing</code>函数：都用于<strong>配置、指定模拟对象的行为</strong>，模拟对象<strong>应该</strong>返回的东西。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when和given分别来一个例子</span></span><br><span class="line">   <span class="keyword">when</span>(messageService.findWaitState(message_pageable)).thenReturn(messagePage);</span><br><span class="line">   given(venueService.findAll(any())).willReturn(venues);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以做一点小改变</span></span><br><span class="line">   <span class="comment">// 自定义 getUniqueId() 的返回值</span></span><br><span class="line">   <span class="keyword">when</span>(test.getUniqueId()).thenReturn(<span class="number">43</span>);</span><br><span class="line">   <span class="comment">// 在测试中使用mock对象</span></span><br><span class="line">   assertEquals(test.getUniqueId(), <span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// doNothing：当 messageService.confirmMessage 方法被调用时，不做任何操作。</span></span><br><span class="line">   doNothing().<span class="keyword">when</span>(messageService).confirmMessage(id_user_success);</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li>用于<strong>配置模拟对象的行为</strong>，是为了<strong>模拟方法的返回值</strong>，使得在测试中可以<strong>预先定义方法的执行结果</strong>，这种方式允许测试特定方法在给定参数下的行为，以便测试代码的其他部分能够按预期工作。</li><li>when： 当调用 findWaitState 方法并传入指定的 message_pageable 对象时（findWaitState），模拟对象<strong>应该</strong>返回 messagePage 对象。</li><li>given：当调用 venueService.findAll(pageable) 方法时（findAll(any())），模拟对象<strong>应该</strong>返回 pagedResponse 对象。</li></ul><h3 id="3-1-关于其中的findAll"><a href="#3-1-关于其中的findAll" class="headerlink" title="3.1 关于其中的findAll"></a>3.1 关于其中的<code>findAll</code></h3><p>本次课程作业中有一个将结果封装成Page&lt;EntityName&gt;的功能。因此在测试的时候，findAll的作用是根据传入的 pageable 参数，从数据库中查询符合条件的场馆数据，并<strong>将结果封装成一个 Page&lt;EntityName&gt; 对象返回</strong>，举例：返回Page&lt;Venue&gt;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Venue&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line"><span class="keyword">when</span>(venueService.findAll(pageable)).thenReturn(pageOfVenues);</span><br><span class="line">given(venueService.findAll(any())).willReturn(venues);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-perform和andExpect函数：用来模拟http连接的"><a href="#4-perform和andExpect函数：用来模拟http连接的" class="headerlink" title="4. perform和andExpect函数：用来模拟http连接的"></a>4. <code>perform</code>和<code>andExpect</code>函数：用来模拟http连接的</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">&quot;/message_manage&quot;</span>))</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andExpect(view().name(<span class="string">&quot;admin/message_manage&quot;</span>))</span><br><span class="line">        .andExpect(model().attribute(<span class="string">&quot;total&quot;</span>, messagePage.getTotalPages()));</span><br></pre></td></tr></table></figure><ul><li>使用 mockMvc 执行模拟的 HTTP <strong>GET</strong> 请求到 &#x2F;message_manage 路径。</li><li>预期响应<strong>状态status</strong>码为 200 (OK)，<strong>视图view也就是在原有的类里返回的值</strong>名称为 admin&#x2F;message_manage。</li><li>验证模型中的 <strong>total 属性</strong>是否等于 messagePage 的总页数，写这句是因为在原有的类里有对model的attribute进行赋值等操作。</li></ul><h2 id="5-verify函数：验证方法是否被调用过、调用过几次"><a href="#5-verify函数：验证方法是否被调用过、调用过几次" class="headerlink" title="5. verify函数：验证方法是否被调用过、调用过几次"></a>5. <code>verify</code>函数：验证<strong>方法是否被调用过、调用过几次</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举两个例子</span></span><br><span class="line">   verify(messageService, times(<span class="comment">/*wanted number of invocations*/</span><span class="number">1</span>)).findWaitState(message_pageable);</span><br><span class="line">   verify(venueService).findAll(pageable);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 原型可做了解</span></span><br><span class="line">   <span class="meta">@CheckReturnValue</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">verify</span><span class="params">(T mock, VerificationMode mode)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> MOCKITO_CORE.verify(mock, mode);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>messageService 是要验证的模拟对象。</p></li><li><p>times(1) 指定了方法 findWaitState 应该被调用的次数，这里是期望被调用一次。</p></li><li><p><strong>后续的</strong>findWaitState(message_pageable) 是<strong>实际</strong>要验证的方法调用，message_pageable 是该方法的参数。</p></li><li><p>这行代码的作用是确保 <code>messageService.findWaitState(message_pageable)</code> 方法被调用了一次。如果调用次数不符合期望，将会抛出验证失败的异常，从而可以确保方法在测试中按预期执行。</p></li><li><p>@CheckReturnValue 注解是用来提示调用者检查方法的返回值，确保返回值不被忽略，它提醒调用该方法后<strong>应该考虑处理方法的返回值，例如赋值给变量、进行检查或者使用返回值执行其他操作</strong>，以免造成程序逻辑错误或资源泄漏等问题。</p></li></ul><h2 id="6-json相关操作-i-的意思是第i个参数、-是数组"><a href="#6-json相关操作-i-的意思是第i个参数、-是数组" class="headerlink" title="6. json相关操作:$[i]的意思是第i个参数、$是数组"></a>6. json相关操作:<code>$[i]</code>的意思是第i个参数、<code>$</code>是数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">&quot;/venueList.do&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;page&quot;</span>, String.valueOf(page)))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().contentType(<span class="string">&quot;application/json&quot;</span>)) <span class="comment">// 表示期望返回的响应内容类型为 application/json，即 JSON 格式</span></span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$&quot;</span>, hasSize(<span class="number">1</span>))) <span class="comment">// 表示期望返回的 JSON 数组 $ 的长度为 1，即结果包含一个元素</span></span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$[0].venueID&quot;</span>, is(<span class="number">1</span>))) <span class="comment">// 表示期望返回的 JSON 数组中第一个元素的 venueID 属性值为 1</span></span><br></pre></td></tr></table></figure><h2 id="7-perform-andExpect里的is3xxRedirection"><a href="#7-perform-andExpect里的is3xxRedirection" class="headerlink" title="7. perform....andExpect里的is3xxRedirection()"></a>7. <code>perform....andExpect</code>里的<code>is3xxRedirection()</code></h2><ul><li>去官网查到：判断是不是在<code>org.springframework.http.HttpStatus.Series.REDIRECTION</code>里，也就是3开头的意思是重定向</li><li>（1开头：info，2开头：成功，3开头：重定向，4开头：客户那边的错误，5开头：服务器的错误）</li></ul><p>感谢阅读！新人第一篇文章，请指正！</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 Software Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mockito </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
